# PostgreSQL - বাংলা ডকুমেন্টেশন

## PostgreSQL কি?

PostgreSQL একটি ফ্রি ও ওপেন সোর্স রিলেশনাল ডাটাবেস ম্যানেজমেন্ট সিস্টেম (RDBMS)। এটি শক্তিশালী, নিরাপদ এবং উন্নত ফিচার সমৃদ্ধ, যা ছোট থেকে বড় সব ধরনের অ্যাপ্লিকেশনে ব্যবহার করা যায়।

## PostgreSQL-এর প্রধান বৈশিষ্ট্য

- **ফ্রি ও ওপেন সোর্স**  
  PostgreSQL সম্পূর্ণ বিনামূল্যে ব্যবহার করা যায় এবং এর সোর্স কোড যেকোনোভাবে মডিফাই করা যায়।

- **ACID কম্প্লায়েন্ট**  
  ডাটাবেসের ট্রানজেকশন নিরাপদ ও নির্ভরযোগ্য (Atomicity, Consistency, Isolation, Durability নিশ্চিত করে)।

- **এক্সটেনসিবল (প্রসারযোগ্য)**
  - নিজের মতো করে ডাটা টাইপ, ফাংশন, অপারেটর বানানো যায়
  - পাইথন, পার্ল, জাভা ইত্যাদি ভাষায় প্রসিডিউর লিখা যায়
  - PostGIS এক্সটেনশন দিয়ে জিওগ্রাফিক্যাল ডাটা ম্যানেজ করা যায়

- **JSON/JSONB সাপোর্ট**  
  NoSQL-এর মতো জেসন ডাটা স্টোর ও কোয়েরি করা যায়

- **হাই পারফরম্যান্স**
  - বড় ডাটা হ্যান্ডেল করতে পারে
  - ইন্ডেক্সিং, পার্টিশনিং, রেপ্লিকেশন সাপোর্ট করে

- **সিকিউরিটি**  
  ইউজার পারমিশন, এনক্রিপশন, রো-লেভেল সিকিউরিটি (RLS) সাপোর্ট করে

- **ক্রস-প্ল্যাটফর্ম**  
  লিনাক্স, উইন্ডোজ, ম্যাক সব অপারেটিং সিস্টেমে চলে

## PostgreSQL কখন ব্যবহার করবেন?

✔ **জটিল ডাটাবেস অ্যাপ্লিকেশন** (যেমন: ERP, CRM)  
✔ **জিওগ্রাফিক ডাটা** (ম্যাপিং অ্যাপস, PostGIS দিয়ে)  
✔ **ডাটা অ্যানালিটিক্স ও বিজনেস ইন্টেলিজেন্স**  
✔ **ওয়েব অ্যাপস** (Backend হিসেবে)  
✔ **মেশিন লার্নিং/এআই প্রজেক্টে ডাটা স্টোর করতে**

## সারসংক্ষেপ

PostgreSQL একটি শক্তিশালী, ফ্রি ও ফ্লেক্সিবল ডাটাবেস সিস্টেম, যা বড় ও জটিল অ্যাপ্লিকেশনের জন্য উপযুক্ত। MySQL-এর চেয়ে বেশি ফিচার সমৃদ্ধ, কিন্তু SQLite-এর চেয়ে জটিল।

আপনি যদি এডভান্সড ডাটাবেস ম্যানেজমেন্ট চান, PostgreSQL একটি চমৎকার পছন্দ!


# PostgreSQL-এ স্কিমা: ধারণা ও ব্যবহার

## স্কিমা কী?
PostgreSQL-এ **স্কিমা** হলো ডাটাবেসের ভিতরের একটি লজিক্যাল ফোল্ডার বা নামস্থান (namespace) যেখানে বিভিন্ন ডাটাবেস অবজেক্ট গুছিয়ে রাখা যায়। যেমন:
- টেবিল
- ভিউ
- ফাংশন
- ইন্ডেক্স

## PostgreSQL-এ স্কিমার উদ্দেশ্য

### ১. ডাটা গোছানো (Organization)
- একই নামের টেবিল আলাদা স্কিমায় রাখা যায়  
  উদাহরণ: `hr.users` এবং `finance.users`
- বড় অ্যাপ্লিকেশনে টেবিলগুলো বিভাগ অনুযায়ী সাজানো যায়  
  উদাহরণ: `inventory.products`, `sales.orders`

### ২. সিকিউরিটি ও অ্যাক্সেস কন্ট্রোল
- ইউজারদের আলাদা স্কিমায় অ্যাক্সেস দেওয়া যায়  
  উদাহরণ: HR টিম শুধু `hr` স্কিমা দেখতে পারবে
- সেনসিটিভ ডাটা লুকানো যায়  
  উদাহরণ: `audit.logs` স্কিমা শুধু অ্যাডমিন দেখতে পারবে

### ৩. মাল্টি-টেন্যান্সি (Multi-tenancy)
- একই ডাটাবেসে একাধিক ক্লায়েন্টের ডাটা রাখা যায়  
  উদাহরণ: `client1.orders`, `client2.orders`

### ৪. এক্সটেনশন ম্যানেজমেন্ট
- পোস্টজিআইএস (PostGIS) বা অন্য এক্সটেনশন আলাদা স্কিমায় ইন্সটল করা যায়
- মূল টেবিলের সাথে কনফ্লিক্ট এড়ানো যায়

### ৫. সহজ ব্যাকআপ ও মাইগ্রেশন
- শুধু একটি স্কিমা ব্যাকআপ করা যায় (পুরো ডাটাবেস নয়)
- স্কিমা ডিলিট করলে বাকি ডাটাবেস অক্ষত থাকে

## কখন স্কিমা ব্যবহার করবেন?
✔ **বড় অ্যাপ্লিকেশন** (100+ টেবিল গুছিয়ে রাখতে)  
✔ **মাল্টি-টেন্যান্ট সিস্টেম** (প্রতি ক্লায়েন্টের ডাটা আলাদা স্কিমায়)  
✔ **সিকিউরিটি** (ইউজারদের অ্যাক্সেস লিমিট করতে)  

স্কিমা ব্যবহার করে আপনি **ডাটাবেসকে আরও ক্লিন, সিকিউর ও ম্যানেজযোগ্য** করে তুলতে পারবেন! 



## PostgreSQL-এ Primary Key এবং Foreign Key ধারণাগুলি

Key হল একটি রিলেশনাল ডাটাবেসের সবচেয়ে গুরুত্বপূর্ণ উপাদানগুলির মধ্যে একটি যা টেবিলের মধ্যে সম্পর্ক বজায় রাখে এবং এটি একটি টেবিল থেকে ডেটা অনন্যভাবে সনাক্ত করতেও সাহায্য করে। Primary Key হল এমন একটি কী যা ডাটাবেসের Tuple অনন্যভাবে সনাক্ত করতে সাহায্য করে। বিপরীতে, Foreign Key হল একটি কী যা একটি টেবিলের Primary Key এর মাধ্যমে টেবিলগুলির মধ্যে সম্পর্ক নির্ধারণ করতে ব্যবহৃত হয় যা একটি টেবিলের Primary Key অন্য টেবিলের সাথে Foreign Key হিসাবে কাজ করে। এখন, আসুন উভয়কে কিছু বিশদে আলোচনা করি।
### Primary Key কী?
নির্দিষ্ট কলামের ডেটা Unique তা নিশ্চিত করার জন্য একটি Primary Key ব্যবহার করা হয়। একটি কলামে NULL মান থাকতে পারে না। এটি হয় একটি বিদ্যমান টেবিল কলাম অথবা একটি কলাম যা একটি নির্দিষ্ট ক্রম অনুসারে ডাটাবেস দ্বারা বিশেষভাবে তৈরি করা হয়।

| student_id| name             | Address       	|
|-----------|------------------|--------------- |
| 1         | Alice Green      | Chittagong 	|
| 2         | Bob White        | Dhaka    	|
| 3         | Carol King       | Dhaka 		|

এই টেবিলে "Student_id" রেকর্ডটি এককভাবে সনাক্ত করতে ব্যবহৃত হয়েছে। তাই "Student_id" এই টেবিলের জন্য Primary Key। 
### Foreign Key কী?
Foreign Key হলো একটি রিলেশনাল ডাটাবেস টেবিলের একটি কলাম বা কলামের গ্রুপ যা দুটি টেবিলের ডেটার মধ্যে একটি লিঙ্ক প্রদান করে। এটি এমন একটি কলাম (Group of কলাম) যা অন্য টেবিলের একটি কলাম (প্রায়শই Primary Key) উল্লেখ করে।
STUDENT_COURSE

| student_no| Course_Id | Course Name        |
|-----------|-----------|---------------     |
| 1         | C1        | Database Mangement |
| 2         | C2        | Programming        |
| 1         | C2        | Programming 	     |


উদাহরণ: STUDENT_COURSE-তে STUDENT_NO হল STUDENT সম্পর্কের STUDENT_ID-এর একটি Foreign Key।


## VARCHAR vs CHAR ডাটা টাইপের পার্থক্য (PostgreSQL-এ)

### মৌলিক ধারণা
CHAR এবং VARCHAR উভয়ই টেক্সট ডাটা স্টোর করার জন্য ব্যবহৃত হয়, কিন্তু তাদের স্টোরেজ পদ্ধতি ও ব্যবহারের ক্ষেত্রে গুরুত্বপূর্ণ পার্থক্য রয়েছে।

CHAR (Character)
ফিক্সড দৈর্ঘ্যের স্ট্রিং স্টোর করে

ডিফাইন করা দৈর্ঘ্যে ফিক্সড স্পেস নেয়

উদাহরণ: CHAR(10) সবসময় 10 বাইট জায়গা নেবে
- **এক্সটেনসিবল (প্রসারযোগ্য)**
  - নিজের মতো করে ডাটা টাইপ, ফাংশন, অপারেটর বানানো যায়
  - পাইথন, পার্ল, জাভা ইত্যাদি ভাষায় প্রসিডিউর লিখা যায়
  - PostGIS এক্সটেনশন দিয়ে জিওগ্রাফিক্যাল ডাটা ম্যানেজ করা যায়


- **বৈশিষ্ট্য:
-ফিক্সড স্টোরেজ সাইজ

-দ্রুত এক্সেস (দৈর্ঘ্য জানা থাকলে)

-খালি জায়গা স্পেস দিয়ে পূর্ণ হয়

উদাহরণ:
```sql
CREATE TABLE example (
    country_code CHAR(2)  -- সবসময় ২ বাইট নেবে (IN, US, BD)
);
```
## VARCHAR (Variable Character)
ভেরিয়েবল দৈর্ঘ্যের স্ট্রিং স্টোর করে

শুধু প্রয়োজনীয় জায়গা নেয়

উদাহরণ: VARCHAR(100) কিন্তু "Hello" স্টোর করলে মাত্র 5 বাইট নেবে

- **বৈশিষ্ট্য:
-ফ্লেক্সিবল স্টোরেজ সাইজ

-স্পেস সেভিং (খালি জায়গা নষ্ট হয় না)

-স্লিগল্টলি স্লোয়ার এক্সেস

উদাহরণ:
```sql
CREATE TABLE example (
    user_name VARCHAR(100)  -- সর্বোচ্চ ১০০, কিন্তু কম নিতে পারে
);
```
## **পার্থক্যের সারসংক্ষেপ**

| **প্যারামিটার**       | **CHAR**                  | **VARCHAR**               |
|----------------------|--------------------------|--------------------------|
| **স্টোরেজ পদ্ধতি**    | ফিক্সড দৈর্ঘ্য           | ভেরিয়েবল দৈর্ঘ্য         |
| **স্পেস ব্যবহার**     | সবসময় ডিফাইন করা সাইজ   | শুধু প্রয়োজনীয় সাইজ     |
| **পারফরমেন্স**       | সামান্য দ্রুততর          | সামান্য ধীর              |
| **সর্বোচ্চ দৈর্ঘ্য**  | 255 ক্যারেক্টার          | 65,535 ক্যারেক্টার        |
ব্যবহারের ক্ষেত্র	ফিক্সড সাইজের ডাটা	ভেরিয়েবল সাইজের ডাটা
## কখন কোনটি ব্যবহার করবেন?
CHAR ব্যবহার করুন যখন:

#ডাটার দৈর্ঘ্য সবসময় একই (যেমন: দেশের কোড, জেন্ডার M/F)

প্যাডিং গুরুত্বপূর্ণ হলে

VARCHAR ব্যবহার করুন যখন:

-ডাটার দৈর্ঘ্য ভিন্ন ভিন্ন (যেমন: নাম, ঠিকানা)

-স্টোরেজ স্পেস সাশ্রয় করতে চাইলে

বাস্তব উদাহরণ

-- CHAR এর জন্য ভালো উদাহরণ
```sql
CREATE TABLE users (
    gender CHAR(1),        -- M/F/O
    blood_group CHAR(3)    -- A+, B-, O+
);
```
-- VARCHAR এর জন্য ভালো উদাহরণ
```sql
CREATE TABLE products (
    product_name VARCHAR(100),
    description VARCHAR(500)
);
## গুরুত্বপূর্ণ নোট
PostgreSQL-এ VARCHAR এবং TEXT প্রায় একই রকম, কিন্তু CHAR সম্পূর্ণ আলাদা। সাধারণত VARCHAR ব্যবহার করাই ভালো, শুধুমাত্র ফিক্সড-লেন্থ ডাটার জন্য CHAR ব্যবহার করুন।





### WHERE ক্লজের উদ্দেশ্য (SELECT স্টেটমেন্টে)
WHERE ক্লজ একটি SELECT স্টেটমেন্টে ব্যবহার করা হয় ডাটাবেস টেবিল থেকে নির্দিষ্ট শর্ত  অনুযায়ী ডাটা ফিল্টার করার জন্য। এটি শুধুমাত্র সেই রেকর্ডগুলোকে রিটার্ন করে যেগুলো প্রদত্ত শর্ত পূরণ করে।

উদাহরণ সহ ব্যাখ্যা:
ধরুন আপনার একটি টেবিল আছে employees যেখানে নিচের ডাটা আছে:
| id   | name     |salary    |department
|------|----------|----------|
| 1    | Rahim    | 50000    |HR
| 2    | Karim    | 60000    |IT
| 3    | Sumon    | 45000    |HR
| 4    | Rita     | 70000    |Finance


এখন আপনি শুধুমাত্র HR ডিপার্টমেন্টের কর্মচারীদের দেখতে চান। তখন আপনি লিখবেন:
```
sql
SELECT * FROM employees WHERE department = 'HR';
```
আউটপুট:
| id   | name     |salary    |department
|------|----------|----------|
| 1    | Rahim    | 50000    |HR
| 3    | Sumon    | 45000    |HR


WHERE ক্লজের প্রধান ব্যবহার:
নির্দিষ্ট মান অনুসারে ডাটা খুঁজে বের করা (যেমন: WHERE age > 25)

একাধিক শর্ত যুক্ত করা (AND, OR ব্যবহার করে)
```
sql
SELECT * FROM employees WHERE department = 'HR' AND salary > 40000;
```
প্যাটার্ন ম্যাচ করা (LIKE অপারেটর দিয়ে)
```
sql
SELECT * FROM employees WHERE name LIKE 'R%'; -- নাম 'R' দিয়ে শুরু হয় এমন সব কর্মচারী
ডাটা বাদ দেওয়া (NOT ব্যবহার করে)
```
sql
SELECT * FROM employees WHERE department NOT IN ('HR', 'IT');
```
সারমর্ম:
WHERE ক্লজ ডাটাবেস কুয়েরিকে আরও নির্দিষ্ট এবং কার্যকর করে তোলে, যাতে আপনি শুধু প্রয়োজনীয় ডাটা দেখতে পান। এটি ডাটা অ্যানালাইসিস, রিপোর্টিং এবং ডাটা ম্যানিপুলেশনের জন্য অত্যন্ত গুরুত্বপূর্ণ।